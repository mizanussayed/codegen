using {applicaitonRootNs}.Common.Interfaces;
using {applicaitonRootNs}.Common.Mappings;
using {applicaitonRootNs}.Common.Models;

namespace {namespace};

public record GetAll{nameofPlural}Query(int PageNumber = 1, int PageSize = 10) 
     : IRequest<PaginatedList<{itemname}Response>>;

internal sealed class GetAll{nameofPlural}QueryHandler(IApplicationDbContext _context, IMapper _mapper) 
     : IRequestHandler<GetAll{nameofPlural}Query, PaginatedList<{itemname}Response>>
{
    public async Task<PaginatedList<{itemname}Response>> Handle(GetAll{nameofPlural}Query request, CancellationToken cancellationToken)
    {
        return await _context.{nameofPlural}
            .OrderBy(x => x.Id)
            .ProjectTo<{itemname}Response>(_mapper.ConfigurationProvider)
            .PaginatedListAsync(request.PageNumber, request.PageSize);
    }
}


