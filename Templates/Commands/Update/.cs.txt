using {applicaitonRootNs}.Common.Interfaces;
using {domainRootNs}.Entities;

namespace {namespace};

public record Update{itemname}Command(int Id): IRequest<int>
{
    {dtoFieldDefinition}
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<Update{itemname}Command,{itemname}>();
        }
    }
}

internal sealed class Update{itemname}CommandHandler(IApplicationDbContext _context, IMapper _mapper) 
    : IRequestHandler<Update{itemname}Command, int>
{
    public async Task<int> Handle(Update{itemname}Command request, CancellationToken cancellationToken)
    {
        var entity = await _context.{nameofPlural}
            .FindAsync(new object[] { request.Id }, cancellationToken);

        Guard.Against.NotFound(request.Id, entity);

        entity = _mapper.Map(request, entity);

        await _context.SaveChangesAsync(cancellationToken);

        return entity.Id;
    }
}