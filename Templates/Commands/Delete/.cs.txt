using {applicaitonRootNs}.Common.Interfaces;

namespace {namespace};

public record Delete{itemname}Command(int Id):  IRequest<int>;

internal sealed class Delete{itemname}CommandHandler(IApplicationDbContext _context) 
    : IRequestHandler<Delete{itemname}Command, int>

{
    public async Task<int> Handle(Delete{itemname}Command request, CancellationToken cancellationToken)
    {
        var entity = await _context.{nameofPlural}
            .FindAsync(new object[] { request.Id }, cancellationToken);

        Guard.Against.NotFound(request.Id, entity);

        _context.{nameofPlural}.Remove(entity);

        await _context.SaveChangesAsync(cancellationToken);

        return entity.Id;
    }

}