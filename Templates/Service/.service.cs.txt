using Lib.ErrorOr;

using Mapster;

using {domainRootNs}.Features.{nameofPlural}.Entity;
using {domainRootNs}.Features.{nameofPlural}.Model;
using {domainRootNs}.Features.{nameofPlural}.Repository;
using {domainRootNs}.Configurations.UnitOfWorks;

namespace {namespace};

public class {itemName}Service(IUnitOfWork unitOfWork)
{
    public async Task<ErrorOr<IEnumerable<{itemName}ResponseModel>>> GetAllAsync(CancellationToken cancellationToken)
    {
        var repository = unitOfWork.Repository<I{itemName}Repository>();
        var dbResult = await repository.GetAllAsync(cancellationToken).ConfigureAwait(false);
        if (dbResult.IsError)
        {
            return dbResult.Error;
        }
        return ErrorOr.From(dbResult.Value.Adapt<IEnumerable<{itemName}ResponseModel>>());
    }

    public async Task<ErrorOr<{itemName}ResponseModel>> GetAsync(long id, CancellationToken cancellationToken)
    {
        var repository = unitOfWork.Repository<I{itemName}Repository>();

        var dbResult = await repository.GetAsync(id, cancellationToken).ConfigureAwait(false);
        if (dbResult.IsError)
        {
            return dbResult.Error;
        }
        return ErrorOr.From(dbResult.Value.Adapt<{itemName}ResponseModel>());
    }

    public async Task<ErrorOr<Success>> CreateAsync({itemName}RequestModel requestModel, CancellationToken cancellationToken)
    {
        var repository = unitOfWork.Repository<I{itemName}Repository>();

        var dbResult = await repository.CreateAsync(requestModel.Adapt<{itemName}>(), cancellationToken).ConfigureAwait(false);

        if (dbResult.IsError)
        {
            return dbResult.Error;
        }
        return SuccessType.Success;
    }

    public async Task<ErrorOr<Success>> UpdateAsync({itemName}RequestModel requestModel, CancellationToken cancellationToken)
    {
        var repository = unitOfWork.Repository<I{itemName}Repository>();

        var dbResult = await repository.UpdateAsync(requestModel.Adapt<{itemName}>(), cancellationToken).ConfigureAwait(false);

        if (dbResult.IsError)
        {
            return dbResult.Error;
        }
        return SuccessType.Success;
    }

    public async Task<ErrorOr<Success>> DeleteAsync(long id, CancellationToken cancellationToken)
    {
        var repository = unitOfWork.Repository<I{itemName}Repository>();

        var dbResult = await repository.DeleteAsync(id, cancellationToken).ConfigureAwait(false);

        if (dbResult.IsError)
        {
            return dbResult.Error;
        }
        return SuccessType.Success;
    }
}
